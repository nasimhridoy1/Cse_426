#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <cstdlib>
#include <cmath>
#include <iostream>
#include <ctime>
using namespace std;

// --------- SETTINGS ---------
const int WIN_W = 640;
const int WIN_H = 480;

// --------- UNIQUE VARIABLE CHANGES ---------
int X1_USER = 100;
int Y1_USER = 100;
int X2_USER = 500;
int Y2_USER = 300;

// Lambda to tweak coordinates
auto tweak = [](int val) { return val + 42; };

// Bitwise flip for fun
int flipBits(int val) { return ~val & 0x3FF; } // keep within 10-bit range

// Randomize within window
int randomCoord(int max) { return rand() % max; }

// --------- PIXEL DRAWING ---------
void putPixel(int x, int y)
{
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// --------- BRESENHAM LINE ---------
void bresenhamLine(int x1, int y1, int x2, int y2)
{
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    bool steep = dy > dx;

    if (steep)
    {
        swap(x1, y1); swap(x2, y2);
        swap(dx, dy); swap(sx, sy);
    }

    int err = 2 * dy - dx;
    int x = x1, y = y1;

    for (int i = 0; i <= dx; i++)
    {
        if (steep) putPixel(y, x);
        else putPixel(x, y);

        if (err > 0)
        {
            y += sy;
            err -= 2 * dx;
        }

        x += sx;
        err += 2 * dy;
    }
}

// --------- DISPLAY ---------
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0f, 1.0f, 0.0f); // yellow

    bresenhamLine(X1_USER, Y1_USER, X2_USER, Y2_USER);

    glFlush();
}

// --------- INIT ---------
void initGL()
{
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, WIN_W, 0, WIN_H);
    glPointSize(2.0f);
}

// --------- MAIN ---------
int main(int argc, char** argv)
{
    srand(time(0)); // seed randomness

    // Apply unique changes
    X1_USER = tweak(X1_USER);            // lambda tweak
    Y1_USER = flipBits(Y1_USER);         // bitwise flip
    X2_USER = randomCoord(WIN_W);        // random x
    Y2_USER = randomCoord(WIN_H);        // random y

    cout << "Drawing line from (" << X1_USER << "," << Y1_USER << ") to ("
         << X2_USER << "," << Y2_USER << ")\n";

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(WIN_W, WIN_H);
    glutCreateWindow("Bresenham Line with Unique Variables");

    initGL();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
