#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <cstdlib>
#include <cmath>
#include <iostream>
#include <algorithm>

using namespace std;

// --------- SETTINGS ---------
constexpr int WINDOW_WIDTH = 640;
constexpr int WINDOW_HEIGHT = 480;

// Line endpoints
struct Point {
    int x = -1;
    int y = -1;
};

Point p1, p2;
bool isDrawing = false;
bool isFirstPointSet = false;

// Draw a single pixel
void drawPixel(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// Generalized Bresenham line algorithm
void drawLineBresenham(int x1, int y1, int x2, int y2) {
    int dx = abs(x2 - x1), dy = abs(y2 - y1);
    int sx = (x1 < x2) ? 1 : -1;
    int sy = (y1 < y2) ? 1 : -1;
    bool steep = dy > dx;

    if (steep) {
        swap(x1, y1); swap(x2, y2);
        swap(dx, dy); swap(sx, sy);
    }

    int err = 2 * dy - dx;
    int x = x1, y = y1;

    for (int i = 0; i <= dx; ++i) {
        steep ? drawPixel(y, x) : drawPixel(x, y);
        if (err > 0) {
            y += sy;
            err -= 2 * dx;
        }
        x += sx;
        err += 2 * dy;
    }
}

// Display callback
void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0f, 1.0f, 0.0f); // Yellow line

    if (isFirstPointSet) {
        drawLineBresenham(p1.x, p1.y, p2.x, p2.y);

        glColor3f(1.0f, 0.0f, 0.0f); // Red endpoints
        glPointSize(5.0f);
        drawPixel(p1.x, p1.y);
        drawPixel(p2.x, p2.y);
        glPointSize(2.0f);
    }

    glFlush();
}

// Mouse click callback
void handleMouseClick(int button, int state, int x, int y) {
    int convertedY = WINDOW_HEIGHT - y;

    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        if (!isFirstPointSet) {
            p1 = {x, convertedY};
            p2 = p1;
            isFirstPointSet = true;
            isDrawing = true;
            cout << "Start point set at (" << p1.x << ", " << p1.y << ")\n";
        } else {
            p2 = {x, convertedY};
            isDrawing = false;
            isFirstPointSet = false;
            cout << "End point set at (" << p2.x << ", " << p2.y << "). Line drawn.\n";
        }
        glutPostRedisplay();
    }
}

// Mouse motion callback
void handleMouseMotion(int x, int y) {
    if (isDrawing) {
        p2 = {x, WINDOW_HEIGHT - y};
        glutPostRedisplay();
    }
}

// OpenGL initialization
void initializeOpenGL() {
    glClearColor(0.0, 0.0, 0.0, 1.0); // Black background
    glColor3f(1.0, 1.0, 1.0);         // Default draw color
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, WINDOW_WIDTH, 0, WINDOW_HEIGHT);
    glPointSize(2.0f);
}

int main(int argc, char** argv) {
    cout << "--- Interactive Bresenham Line Drawer ---\n"
         << "1. LEFT-CLICK to set the starting point.\n"
         << "2. Move the mouse to preview the line.\n"
         << "3. LEFT-CLICK again to finalize the line.\n"
         << "4. Repeat to draw more lines.\n\n";

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT
